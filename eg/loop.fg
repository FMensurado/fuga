
:: An infinite loop.
loop = (
    :: Is the loop over?
    done? = false
    
    :: Prepare for the next loop iteration.
    next! = void
    
    :: Build up the environment/scope for the loop body.
    :: This is used by loop modifiers like "for".
    build(env) {
        env break(value=nil) {
            Break clone(value=value) raise
        }
        env continue {
            Continue raise
        }
    }
)

:: Create a new kind of loop.
:: The new loop works differently based on what slots are defined.
:: The slots are
::     done? => Bool
::     next! => nil
::     build(env) => nil
:: If any of these slots are defined, they are combined with the existing
:: loop. In other words, the effect is cumulative.
loop new(..args) {
    loop = self clone
    if(args has?(:done?), loop done? { self proto done? || args done? })
    if(args has?(:next!), loop next! { self proto next!,   args next! })
    if(args has?(:build), loop build(scope) {
                              self proto build(scope)
                              args build(scope)
                           }
    loop
}


# Loop Conditions

loop while(~condition) {
    self new(
        done? { not(condition eval) }
    )
}

loop for(~x, xs) {
    self new(
        xs = var(xs iter)
        done?       { xs done? }
        next!       { xs := xs next }
        build(env)  { env set(x code, xs value) }
    )
}

loop enum(~i) { self enum(~i, 0) }
loop enum(~i, start) {
    self new(
        x = var(start)
        next! { x := x + 1 }
        build(env) { env set(i code, x) }
    )
}
loop enum(~i, start, end) {
    self new(
        x = var(start)
        done? { x >= end }
        next! { x := x + 1 }
        build(env) { env set(i code, x) }
    )
}

# Loop Execution

loop do(~body..) {
    loopself = self
    if( loopself done?
        void
        try(do(~body.., throw(:continue))
            break(value) { value }
            continue { loopself next!
                       loopself do(~body..) })
}

loop collect(~body..) {
    xs = var(list)
    self do(
        x = do(~body)
        xs := xs <+ x
    ) else (
        xs
    )
}

