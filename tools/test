#!/usr/bin/env python
""" test -- test fuga modules and functions
"""

import os
import os.path
import sys



def filename_h(module):
    return "src/%s.h" % module

def filename_c(module):
    return "src/%s.c" % module

def filename_o(module):
    module = module.replace('/', '_')
    return "bin/%s.o" % module

def modulename(filename):
    suffix = filename[-2:]
    if suffix in ['.h', '.c']:
        return filename[:-2]
    return filename

def file_exists(filename):
    try:
        os.path.getmtime(filename)
        return True
    except OSError:
        return False

def main_module(package):
    return package + "/" + package

def is_module(module):
    module = modulename(module)
    return (file_exists(filename_c(module)) or
            file_exists(filename_h(module)))

def is_package(package):
    import glob
    return not not (
        glob.glob("src/%s/*.c" % package) or
        glob.glob("src/%s/*.h" % package)
    )

def module_of(name):
    return '/'.join(name.split('_')[:-1])

def prefix(module, *varg):
    return '_'.join(module.split('/') + list(varg))

def is_function(name):
    return '_' in name and (
        is_module(module_of(name)) or
        is_package(module_of(name))
    )

def run(name, command):
    status = os.system(command)
    if status:
        error("%s exited with status %s" % (name, status))

def testsuites(module):
    modfile = open(filename_c(module));
    result = []
    for line in modfile:
        if 'TESTS' in line:
            index = line.find('TESTS')
            line  = line[index:]
            index = line.find('(')
            line  = line[index+1:]
            index = line.find(')')
            line  = line[:index]
            if not line:
                continue
            result.append(line)
    return result

def run_testsuites(module, testsuites):
    if not is_module(module) and is_package(module):
        module = main_module(module)

    if not is_module(module):
        error("no such module %s" % module)

    if not testsuites:
        return warning("no test suites to run for %s" % module)

    testsuites_decl = '\n'.join(
        ["TESTS(%s);" % name for name in testsuites]
    )
    testsuites_run = '\n'.join(
        ["    TESTS_RUN(%s);" % name for name in testsuites]
    )

    testcode = open("src/.test.c", "w")
    testcode.write("""
#include "fuga/test.h"
#include "%s.h"

%s

int main() {
%s
    return 0;
}
""" % (module, testsuites_decl, testsuites_run))
    testcode.close()
    run('tools/make', 'tools/make --test -x .test')
    run('test', './.test')
    run('rm', 'rm .test')
    run('rm', 'rm src/.test.c')

def test_module(module):
    run_testsuites(module, testsuites(module))

def test_function(name):
    module = module_of(name)
    run_testsuites(module, [name])

def test_package(package):
    import glob
    modules = glob.glob('src/%s/*.c' % package)
    if not modules:
        return warning("no testable modules in package %s" % package)
    for module in modules:
        test_module(module[4:-2])

flag_quiet = True
def warning(msg):
    if not flag_quiet:
        print "WARNING:", msg

def error(msg):
    print "ERROR:", msg
    sys.exit(1)

def test_all():
    import glob
    packages = glob.glob('src/*')
    for package in packages:
        package = package[4:]
        if is_package(package):
            test_package(package)
        elif is_module(package):
            test_module(package)


def print_usage():
    print "Usage:"
    print "    %s --all" % sys.argv[0]
    print "    %s package" % sys.argv[0]
    print "    %s module" % sys.argv[0]
    print "    %s testsuite" % sys.argv[0]
    print "    %s (-h|--help)" % sys.argv[0]
    print "Optional flags:"
    print "    --quiet     Don't display warnings."

def main():
    if '--quiet' in sys.argv:
        global flag_quiet
        flag_quiet = True
        del sys.argv[sys.argv.index('--quiet')]

    if len(sys.argv) not in [2]:
        print_usage()
    elif sys.argv[1] in ['-h', '--help']:
        print_usage()
    elif sys.argv[1] == '--all':
        test_all()
    elif is_module(modulename(sys.argv[1])):
        test_module(modulename(sys.argv[1]))
    elif is_function(sys.argv[1]):
        test_function(sys.argv[1])
    elif is_package(sys.argv[1]):
        test_package(sys.argv[1])
    else:
        error("No such module/function/package %s" % sys.argv[1])

if __name__ == '__main__':
    main()

