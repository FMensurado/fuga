#!/usr/bin/env python
"""make.py -- build fuga modules and packages
"""

CC = "gcc -Wall -Werror -std=c99 -pedantic"

import os
import os.path
import sys

def filename_h(module):
    return "src/%s.h" % module

def filename_c(module):
    return "src/%s.c" % module

def filename_o(module):
    module = module.replace('/', '_')
    return "bin/%s.o" % module

def modulename(filename):
    suffix = filename[-2:]
    if suffix in ['.h', '.c']:
        return filename[:-2]
    return filename

def needs_building(module, executable=None):
    try:
        cmtime = os.path.getmtime(filename_c(module))
    except OSError:
        return False
    
    if not executable:
        executable = filename_o(module)
    try:
        omtime = os.path.getmtime(executable)
    except OSError:
        return True
    
    if omtime < cmtime:
        return True

    try:
        hmtime = os.path.getmtime(filename_h(module))
        if omtime < hmtime:
            return True
    except OSError:
        pass

    for dep in deps(module):
        dep = filename_h(dep)
        try:
            depmtime = os.path.getmtime(dep)
            if omtime < depmtime:
                return True
        except OSError:
            pass

    return False

def include(module, path):
    """Calculate the new module."""
    module = module.split('/')[:-1]
    path   = path.split('/')
    while path[0] == '..':
        path = path[1:]
        module = module[:-1]
    module = module + path
    return '/'.join(module)

def deps_filename(module, filename, deps):
    try:
        file = open(filename)
    except IOError:
        return False
    for line in file:
        if line[0] != "#": continue
        line = line[1:].strip()
        if line[:7] != "include": continue
        line = line[7:].lstrip()
        if line[0] != '"' and line[-3:] != '.h"': continue
        dep = include(module, line[1:-3])
        if module == dep: continue
        if dep not in deps:
            deps.append(dep)
    return True
    
def main_module(package):
    return package + '/' + package

def deps(module, memo={}, c=True):
    if module in memo:
        return memo[module]
    result = []
    a = deps_filename(module, filename_h(module), result)
    b = deps_filename(module, filename_c(module), result)
    
    if not a and not b and c:
        return deps(main_module(module), memo, False)

    return result


def file_exists(filename):
    try:
        os.path.getmtime(filename)
        return True
    except OSError:
        return False

def is_module(module):
    return (file_exists(filename_c(module)) or
            file_exists(filename_h(module)))

def build(module, executable=False, done=None):
    """Build a module (whether it needs to be built or not)."""
    cc = CC
    if executable:
        cc += " -o %s %s" % (executable, filename_c(module))
        for dep in done:
            if dep != module and file_exists(filename_o(dep)):
                cc += ' ' + filename_o(dep)
    else:
        cc += " -c -o %s %s" % (filename_o(module), filename_c(module))

    run('gcc', cc)

def make(module, executable=False, done=None):
    module = modulename(module)

    if not done:
        done = []
    done.append(module)

    if not is_module(module):
        print "ERROR: no such module %s" % module
        sys.exit(1)

    if not executable and needs_building(module):
        build(module)

    for dep in deps(module):
        if dep not in done:
            make(dep, False, done)

    if executable:
        build(module, executable, done)

flag_quiet = False
def run(name, command):
    if not flag_quiet:
        print command
    status = os.system(command)
    if status:
        print "ERROR: %s exited with status %s" % (name, status)
        sys.exit(1)


def print_usage():
    print "Usage:"
    print "    %s module" % sys.argv[0]
    print "    %s (-x|--executable) [name] module" % sys.argv[0]
    print "    %s (-h|--help)" % sys.argv[0]
    print "    %s --clean" % sys.argv[0]
    print "Optional flags:"
    print "    --quiet     doesn't print build commands"

def main():
    if '--quiet' in sys.argv:
        global flag_quiet
        flag_quiet = True
        del sys.argv[sys.argv.index('--quiet')]

    if len(sys.argv) not in [2,3,4]:
        print_usage()
    elif sys.argv[1] in ['-h', '--help']:
        print_usage()
    elif sys.argv[1] == '--clean':
        if len(sys.argv) == 2:
            run('rm', 'rm bin/*.o') 
        else:
            print_usage()
    elif len(sys.argv) > 2 and sys.argv[1] not in ['-x', '--executable']:
        print_usage()
    elif len(sys.argv) == 2:
        make(sys.argv[1])
    elif len(sys.argv) == 3:
        make(sys.argv[2], sys.argv[2].split('/')[0])
    elif len(sys.argv) == 4:
        make(sys.argv[3], sys.argv[2])
    else:
        print_usage()

if __name__ == '__main__':
    import doctest
    doctest.testmod()
    main()
