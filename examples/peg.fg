import(...)
module(PEG)

new(~body..) => do(
    matcher = body evalIn(self matcherEnv) start
)

matcherEnv = (
)   
    
fuga = new(
    start       = Module
    
    Module      = Spacing; Block; EndOfFile
    Block       = Slot opt; [Separator; Slot opt] star
    Slot        = SlotPrefix; Expr
    SlotPrefix  = [Name plus; Equals] / [Name star; Object opt; Becomes]
    Expr        = Part; [Operator Part] star
    Part        = Root; Msg star
    Root        = PExpr / Object / Int / String / Msg
    PExpr       = LBracket; Expr; RBracket
    Object      = LParen; Block; RParen
    Msg         = Name; Object opt
    
    LBracket    = lit("["); Spacing
    RBracket    = lit("]"); Spacing
    LParen      = lit("("); Spacing
    RParen      = lit(")"); Spacing
    Separator   = [lit(",") / lit("\n")]; Spacing
    Equals      = lit("=");  !RawOp; Spacing
    Becomes     = lit("=>"); !RawOp; Spacing
    SymPrefix   = lit(":"); !RawOp
    Operator    = !Equals; !Becomes; !SymPrefix; RawOp; Spacing
    Symbol      = lit(":"); RawName; Spacing
    Name        = !Int; RawName; Spacing
    Int         = [BinInt / DecInt / HexInt]; !RawName; Spacing
    
    RawOp       = anyof("`~!@$%^&*\-+=|:;.<>/?") plus
    RawName     = [anyof("a-zA-Z0-9_"); anyof("a-zA-Z0-9_?!") star] /
                  [lit("\\") ; RawOp]
    BinInt      = lit("0b"); anyof("01") plus
    DecInt      = lit("0d") opt; anyof("0-9") plus
    HexInt      = lit("0x"); anyof("0-9a-fA-F") plus
          
    LineSpacing = anyof(" \t\r\n") star
    Comment     = lit("#"); anyof("^\n") star; lit("\n") opt
    Spacing     = [anyof(" \t\r") / Comment] star
    EndOfFile   = !any
) transform (
    Name(match) => match text symbol
)
