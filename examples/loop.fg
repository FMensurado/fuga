loop = (
    continue?  =  true
    build(env) => void
    next!      =  void

    do('code...) => doHelper(code, caller)
    doHelper(code, caller) => 
        self continue? then(
            try (
                env = caller clone
                self build(env)
                env eval(code)
                self next!
            ) catch (
                Break -> exception value
                self doHelper(code, caller)
            )
        )

    mk(args...) =>
        loop clone(args...) clone(
            parent = self
            continue?  => parent continue?  && self continue?
            build(env) => parent build(env);   self build(env)
            next!      => parent next!;        self next!
        )

    for('x,xs) =>
        self mk(
            iterator = var(xs iterator)
            continue? => ! iterator done?
            build(env) => env set(x, iterator value)
            next => iterator := iterator next
        )

    while('cond) =>
        self mk(
            caller = caller
            continue? => self caller eval(cond)
        )

)

